var documenterSearchIndex = {"docs":
[{"location":"examples/CS_simulation/#cs","page":"Simulation of a CS FMU","title":"Simulation of a CS FMU","text":"","category":"section"},{"location":"examples/CS_simulation/","page":"Simulation of a CS FMU","title":"Simulation of a CS FMU","text":"This small example shows a fast and easy way to simulate a co simulation FMU.","category":"page"},{"location":"examples/CS_simulation/","page":"Simulation of a CS FMU","title":"Simulation of a CS FMU","text":"This first command loads the FMI.jl library, so you could work with it.","category":"page"},{"location":"examples/CS_simulation/","page":"Simulation of a CS FMU","title":"Simulation of a CS FMU","text":"#\n# Copyright (c) 2021 Tobias Thummerer, Lars Mikelsons, Josef Kircher\n# Licensed under the MIT license. See LICENSE file in the project root for details.\n#\n\nusing FMI","category":"page"},{"location":"examples/CS_simulation/","page":"Simulation of a CS FMU","title":"Simulation of a CS FMU","text":"The next part sets up the start and stop time, step size and the discrete time points for which values should be safed.","category":"page"},{"location":"examples/CS_simulation/","page":"Simulation of a CS FMU","title":"Simulation of a CS FMU","text":"# our simulation setup\ndt = 0.01\nt_start = 0.0\nt_stop = 8.0\nsaveat = t_start:dt:t_stop","category":"page"},{"location":"examples/CS_simulation/","page":"Simulation of a CS FMU","title":"Simulation of a CS FMU","text":"The FMI.jl library contains two FMUs to try things out and the examples. One of those are compiled for Windows and Linux, the other one only for Windows.","category":"page"},{"location":"examples/CS_simulation/","page":"Simulation of a CS FMU","title":"Simulation of a CS FMU","text":"# this FMU runs under Windows/Linux\npathToFMU = joinpath(dirname(@__FILE__), \"../model/OpenModelica/v1.17.0/SpringFrictionPendulum1D.fmu\")\n\n# this FMU runs only under Windows\nif Sys.iswindows()\n    pathToFMU = joinpath(dirname(@__FILE__), \"../model/Dymola/2020x/SpringFrictionPendulum1D.fmu\")\nend","category":"page"},{"location":"examples/CS_simulation/","page":"Simulation of a CS FMU","title":"Simulation of a CS FMU","text":"fmiLoad unpacks the FMU, reads the model description and stores all the necessary information of the FMU in myFMU. You can read a useful part of the informations with fmiInfo. With fmiInstantiate! am instance of the FMU is created.","category":"page"},{"location":"examples/CS_simulation/","page":"Simulation of a CS FMU","title":"Simulation of a CS FMU","text":"# load the FMU container\nmyFMU = fmiLoad(pathToFMU)\n\n# print some useful FMU-information into the REPL\nfmiInfo(myFMU)\n\n# make an instance from the FMU\nfmiInstantiate!(myFMU; loggingOn=true)","category":"page"},{"location":"examples/CS_simulation/","page":"Simulation of a CS FMU","title":"Simulation of a CS FMU","text":"To simulate the instance of the FMU you have to setup the experiment and enter and leave the initialization mode to prepare the FMU. This part is optional if you use the option setup=true in fmiSimulateCS.","category":"page"},{"location":"examples/CS_simulation/","page":"Simulation of a CS FMU","title":"Simulation of a CS FMU","text":"# setup the experiment, start time = 0.0 (optional for setup=true)\nfmiSetupExperiment(myFMU, t_start)\n\n# enter and exit initialization (optional for setup=true)\nfmiEnterInitializationMode(myFMU)\nfmiExitInitializationMode(myFMU)","category":"page"},{"location":"examples/CS_simulation/","page":"Simulation of a CS FMU","title":"Simulation of a CS FMU","text":"The next part is the actual simulation. FMI.jl provides you with an easy way to do it. The fmiSimulateCS function expects the FMU or instance of an FMU you want to simulate, the start and stop time of the simulation. Additionally you can give an array of variable names which you want to track. The return value of the function is that data. You can also facilitate the setup of the simulation with the second option.","category":"page"},{"location":"examples/CS_simulation/","page":"Simulation of a CS FMU","title":"Simulation of a CS FMU","text":"# run the FMU in mode Co-Simulation (CS) with adaptive step size (CVODE) but fixed save points dt,\n# result values are stored in `data`\ndata = fmiSimulateCS(myFMU, t_start, t_stop; recordValues=[\"mass.s\", \"mass.v\"], setup=true)","category":"page"},{"location":"examples/CS_simulation/","page":"Simulation of a CS FMU","title":"Simulation of a CS FMU","text":"FMI.jl offers a simple way to visualize the simulation results with the fmiPlot function.","category":"page"},{"location":"examples/CS_simulation/","page":"Simulation of a CS FMU","title":"Simulation of a CS FMU","text":"# plot the results\nfmiPlot(data)","category":"page"},{"location":"examples/CS_simulation/","page":"Simulation of a CS FMU","title":"Simulation of a CS FMU","text":"Finally, after your simulation is finished, you can unload the FMU and free the allocated memory.","category":"page"},{"location":"examples/CS_simulation/","page":"Simulation of a CS FMU","title":"Simulation of a CS FMU","text":"# unload the FMU, remove unpacked data on disc (\"clean up\")\nfmiUnload(myFMU)","category":"page"},{"location":"contents/","page":"Contents","title":"Contents","text":"Pages = [\"index.md\", \"features.md\", \"library.md\", \"fmu2.md\", \"parameterize.md\", \"simulateCS.md\", \"simulateME.md\"]","category":"page"},{"location":"examples/examples/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"examples/examples/","page":"Overview","title":"Overview","text":"This section discusses the included examples of the FMI.jl library. So you can execute them on your machine and get detailed information about all of the steps. If you require further information about the function calls, see library or fmu2 function sections.","category":"page"},{"location":"examples/examples/","page":"Overview","title":"Overview","text":"The examples are:","category":"page"},{"location":"examples/examples/","page":"Overview","title":"Overview","text":"CS simulate: Showing how you can simulate a CS FMU.\nME simulate: Showing how you can simulate a ME FMU.\nParameterize: A short example explaining how to parameterize a FMU before simulation.\nMultiple instances: Showing the use of multiple instances.","category":"page"},{"location":"tutorials/load_unload/#loading","page":"Load/Unload a FMU","title":"Load a FMU","text":"","category":"section"},{"location":"tutorials/load_unload/","page":"Load/Unload a FMU","title":"Load/Unload a FMU","text":"Loading a FMU in FMI.jl is fairly easy, you only have to call the fmiLoad function with the path to your FMU.","category":"page"},{"location":"tutorials/load_unload/","page":"Load/Unload a FMU","title":"Load/Unload a FMU","text":"julia> myFMU = fmiLoad(\"path/to/myFMU.fmu\")\njulia> myFMU = fmiLoad(\"path/to/myFMU.fmu\"; unpackPath = \"path/to/unpacked/fmu/\")","category":"page"},{"location":"tutorials/load_unload/","page":"Load/Unload a FMU","title":"Load/Unload a FMU","text":"By default, the unpacked FMU is stored into a temporary directory. Optionally you can provide a path where the FMU should be unpacked. There you have access to the model description and resources of the FMU. Additionally the information of the model description is parsed into a Julia struct.","category":"page"},{"location":"tutorials/load_unload/","page":"Load/Unload a FMU","title":"Load/Unload a FMU","text":"The most important function to access those informations are are:","category":"page"},{"location":"tutorials/load_unload/","page":"Load/Unload a FMU","title":"Load/Unload a FMU","text":"julia> fmiGetModelName(myFMU)\njulia> fmiGetGUID(myFMU)\njulia> fmiString2ValueReference(myFMU, \"ModelVariable\")\njulia> fmiInfo(myFMU)","category":"page"},{"location":"tutorials/load_unload/","page":"Load/Unload a FMU","title":"Load/Unload a FMU","text":"While fmiGetModelName and fmiGetGUID return the name and GUID of the FMU, fmi2String2ValueReference returns the corresponding value reference of a model variable. While fmiInfo prints the same information as the functions mentioned before and also additional ones.","category":"page"},{"location":"tutorials/load_unload/","page":"Load/Unload a FMU","title":"Load/Unload a FMU","text":"Also a connection to the shared library is estabished and depending on the provided FMU, the necessary function pointers are loaded to access the need FMI functions.","category":"page"},{"location":"tutorials/load_unload/#unload","page":"Load/Unload a FMU","title":"Unload a FMU","text":"","category":"section"},{"location":"tutorials/load_unload/","page":"Load/Unload a FMU","title":"Load/Unload a FMU","text":"Similiar to the fmiLoad function the fmiUnload unloads a FMU.","category":"page"},{"location":"tutorials/load_unload/","page":"Load/Unload a FMU","title":"Load/Unload a FMU","text":"julia> fmiUnload(myFMU)","category":"page"},{"location":"tutorials/load_unload/","page":"Load/Unload a FMU","title":"Load/Unload a FMU","text":"The connection to the shared library is closed all instances of the FMU are destroyed (read more about instances here) and the temporary files are deleted.","category":"page"},{"location":"tutorials/overview/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"tutorials/overview/","page":"Overview","title":"Overview","text":"This section gives an overview and short examples on how to work with the FMI.jl library. Please note, that in these tutorials only the version independent function calls starting with fmi are used. You are able to use the version dependent function calls fmiX can be used. But as of now, only FMI standard 2.0.1 is supported, so these calls translate to fmi2 function calls. However support for the upcoming FMI standard 3 is plannend and you will be able to use the fmi3 function calls as well.","category":"page"},{"location":"tutorials/overview/","page":"Overview","title":"Overview","text":"The tutorials are grouped as followed:","category":"page"},{"location":"tutorials/overview/","page":"Overview","title":"Overview","text":"Load/Unload an FMU: A short introductory example on how to load/unload a FMU and what happens in the background.\nSimulate a FMU: Guides you through all the nessacery steps to instatiate, initialize and simulate a FMU.","category":"page"},{"location":"examples/simulateME/#me","page":"Simulation of a ME FMU","title":"Simulation of a ME FMU","text":"","category":"section"},{"location":"examples/simulateME/","page":"Simulation of a ME FMU","title":"Simulation of a ME FMU","text":"This small example shows a fast and easy way to simulate a model exchange FMU.","category":"page"},{"location":"examples/simulateME/","page":"Simulation of a ME FMU","title":"Simulation of a ME FMU","text":"This first command loads the FMI.jl library, so you could work with it.","category":"page"},{"location":"examples/simulateME/","page":"Simulation of a ME FMU","title":"Simulation of a ME FMU","text":"#\n# Copyright (c) 2021 Tobias Thummerer, Lars Mikelsons, Josef Kircher\n# Licensed under the MIT license. See LICENSE file in the project root for details.\n#\n\nusing FMI","category":"page"},{"location":"examples/simulateME/","page":"Simulation of a ME FMU","title":"Simulation of a ME FMU","text":"The next part sets up the start and stop time.","category":"page"},{"location":"examples/simulateME/","page":"Simulation of a ME FMU","title":"Simulation of a ME FMU","text":"# our simulation setup\nt_start = 0.0\nt_stop = 8.0","category":"page"},{"location":"examples/simulateME/","page":"Simulation of a ME FMU","title":"Simulation of a ME FMU","text":"The FMI.jl library contains two FMUs to try things out and the examples. One of those are compiled for Windows and Linux, the other one only for Windows.","category":"page"},{"location":"examples/simulateME/","page":"Simulation of a ME FMU","title":"Simulation of a ME FMU","text":"# this FMU runs under Windows/Linux\npathToFMU = joinpath(dirname(@__FILE__), \"../model/OpenModelica/v1.17.0/SpringFrictionPendulum1D.fmu\")\n\n# this FMU runs only under Windows\nif Sys.iswindows()\n    pathToFMU = joinpath(dirname(@__FILE__), \"../model/Dymola/2020x/SpringFrictionPendulum1D.fmu\")\nend","category":"page"},{"location":"examples/simulateME/","page":"Simulation of a ME FMU","title":"Simulation of a ME FMU","text":"fmiLoad unpacks the FMU, reads the model description and stores all the necessary information of the FMU in myFMU. You can read a useful part of the informations with fmiInfo. With fmiInstantiate! am instance of the FMU is created.","category":"page"},{"location":"examples/simulateME/","page":"Simulation of a ME FMU","title":"Simulation of a ME FMU","text":"# load the FMU container\nmyFMU = fmiLoad(pathToFMU)\n\n# print some useful FMU-information into the REPL\nfmiInfo(myFMU)\n\n# make an instance from the FMU\nfmiInstantiate!(myFMU; loggingOn=true)","category":"page"},{"location":"examples/simulateME/","page":"Simulation of a ME FMU","title":"Simulation of a ME FMU","text":"To simulate the instance of the FMU you have to setup the experiment and enter and leave the initialization mode to prepare the FMU. This part is optional if you use the option setup=true in fmiSimulateCS.","category":"page"},{"location":"examples/simulateME/","page":"Simulation of a ME FMU","title":"Simulation of a ME FMU","text":"# setup the experiment, start time = 0.0 (optional for setup=true)\n#fmiSetupExperiment(myFMU, t_start)\n\n# enter and exit initialization (optional for setup=true)\n#fmiEnterInitializationMode(myFMU)\n#fmiExitInitializationMode(myFMU)","category":"page"},{"location":"examples/simulateME/","page":"Simulation of a ME FMU","title":"Simulation of a ME FMU","text":"The next part is the actual simulation. FMI.jl provides you with an easy way to do it. The fmiSimulateME function expects the FMU or instance of an FMU you want to simulate, the start and stop time of the simulation. Additionally you can facilitate the setup of the simulation with the setup option. The result of the simulation is the return value of the function.","category":"page"},{"location":"examples/simulateME/","page":"Simulation of a ME FMU","title":"Simulation of a ME FMU","text":"# run the FMU in mode Model-Exchange (ME) with adaptive step sizes, result values are stored in `solution`\nsolution = fmiSimulateME(myFMU, t_start, t_stop; setup=true)","category":"page"},{"location":"examples/simulateME/","page":"Simulation of a ME FMU","title":"Simulation of a ME FMU","text":"FMI.jl offers a simple way to visualize the simulation results with the fmiPlot function.","category":"page"},{"location":"examples/simulateME/","page":"Simulation of a ME FMU","title":"Simulation of a ME FMU","text":"# plot the results\nfmiPlot(myFMU, solution)","category":"page"},{"location":"examples/simulateME/","page":"Simulation of a ME FMU","title":"Simulation of a ME FMU","text":"Finally, after your simulation is finished, you can unload the FMU and free the allocated memory.","category":"page"},{"location":"examples/simulateME/","page":"Simulation of a ME FMU","title":"Simulation of a ME FMU","text":"# unload the FMU, remove unpacked data on disc (\"clean up\")\nfmiUnload(myFMU)\n","category":"page"},{"location":"indices/#FMI.jl-Library-Index","page":"Library Index","title":"FMI.jl Library Index","text":"","category":"section"},{"location":"indices/","page":"Library Index","title":"Library Index","text":"","category":"page"},{"location":"features/#Features","page":"Features","title":"Features","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"Please note, that this guide focuses also on users, that are not familiar with FMI. The following feature explanations are written in an easy-to-read-fashion, so there might be some points that are scientifically only 95% correct. For further information on FMI and FMUs, see fmi-standard.org.","category":"page"},{"location":"features/#Execution-Configuration","page":"Features","title":"Execution Configuration","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"Not all FMUs support all features they should according to the FMI-standard, so FMI.jl provides a so called execution configuration.  This configuration is also respected by FMIFlux.jl. The content of the execution configuration may change in future (together with new or deprecated features of linked libraries), but the most important core features will be kept over time. Because not all users need the full potential of this configuration tool, there are three presets given: ","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"myFMU.executionConfig = FMU_EXECUTION_CONFIGURATION_NO_RESET is the default operation mode for FMUs. FMUs are not reset via fmi2Reset, but new instantiated for every simulation run (or training step). This is not the most efficient way, but many FMU have problems with resetting.\nmyFMU.executionConfig = FMU_EXECUTION_CONFIGURATION_RESET is faster for well-implemented FMUs, but needs a fully working fmi2Reset-function. So if you know you have a fully working fmi2Reset, you may be faster with that option.\nmyFMU.executionConfig = FMU_EXECUTION_CONFIGURATION_NO_FREEING should only be the very last choise. If your FMU neither supports fmi2Reset nor a propper fmi2FreeInstance, you could use this configuration as a last way out. Keep in mind, that new FMU instances are allocated but not freed, as long as your Julia instance is running (memory leak). In general, the amount of leaked memory is small, but you need to know what you are doing, if you do thousands or ten-thousands of simulation runs with such a FMU.","category":"page"},{"location":"features/#Model-variable-identification","page":"Features","title":"Model variable identification","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"FMI.jl offers multiple ways to retrieve your model variables. Any function that accepts a variable identifier can handle the following argument types:","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"UInt32 or fmi2ValueReference for example 1610612742 or 0x16000001: This is the most performant way of passing a variable identifier, but you need to know the value reference (you can determine them by having a look in the modelDescription.xml).\nArray{UInt32} or Array{fmi2ValueReference} for example [1610612742, 1610612743] or [0x16000001, 0x16000002]: This is the most performant way of passing multiple variable identifiers, but you need to know the value references.\nString for example \"ball.s\": This is the most intuitive way, because you might already know the variable name from your modelling environment or model documentation.\nArray{String] for example [\"ball.s\", \"der(ball.s)\"]: This is the most intuitive way, because you might already know the variable names from your modelling environment or model documentation.\nSymbol for example :states: There are multiple symbol wildcards for interessting variable groups like :all, :none, :states, :derivatives, :inputs and :outputs.\nnothing: If you don't want to record anything (same as :none)","category":"page"},{"location":"features/#Event-handling","page":"Features","title":"Event handling","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"In FMI2, there are basically two types of events: state and time.  State events are triggered, as soon as one or more event indicators - scalar values that describe the \"distance\" in state space to the next state event - crossing zero.  Time events are triggered at known time points during the simulation.  If your model has state and/or time events is detected automatically by FMI.jl and the event handling happens automatically in the background.","category":"page"},{"location":"features/#Model-exchange-(ME)-and-co-simulation-(CS)","page":"Features","title":"Model exchange (ME) and co-simulation (CS)","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"There are two different model types for FMUs in FMI2: Model exchange (ME) and co-simulation (CS).  If you have a FMU and are only interessted in getting it simulated, use fmiSimulate so FMI.jl will automatically pick CS if available and otherwise ME. If you want to force a specific simulation mode, you can use fmiSimulateME (for ME) or fmiSimulateCS (for CS).","category":"page"},{"location":"features/#Simulate-arbitrary-time-intervals","page":"Features","title":"Simulate arbitrary time intervals","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"You can simply simulate arbitrary time intervals by passing a startTime unequal zero to fmi2SetupExperiment.  Because many FMUs don't support startTime != 0.0 and will throw an error or warning, a time shifting feature inside FMI.jl performs all necessary steps in the background - all corresponding commands like e.g. fmi2SetTime or fmi2NewDiscreteStates act like the desired time interval is simulated. If you don't want this feature (maybe because you are simulating time-dependent systems), you may use the execution configuration myFMU.executionConfig.autoTimeShift=false while providing a startTime != 0.0.","category":"page"},{"location":"features/#Performance","page":"Features","title":"Performance","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"Many commands in FMI.jl are available in in-place and out-of-place sematics. Of course, in-place-calls are faster, because they don't need to allocate new memory at every call (for the return values). So if you have an eye on performance (or must have), a good starting point is to substitute out-of-place- with in-place-calls. Typical improvements are:","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"valueArray = fmi2GetReal(args...) -> fmi2GetReal!(args..., valueArray)\nvalueArray = fmi2GetDerivatives(args...) -> fmi2GetDerivatives!(args..., valueArray)\nvalueArray = fmi2NewDiscreteStates(args...) -> fmi2NewDiscreteStates!(args..., valueArray)","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Of course, you have to use the same piece of memory (to write your return values in) for multiple calls - otherwise there will be no improvement because the number of allocations stays the same.","category":"page"},{"location":"features/#Watch-your-progress","page":"Features","title":"Watch your progress","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"When simulating FMUs with FMI.jl, a progress meter is shown per default. You can control the appearance via the keyword argument showProgress for fmiSimulate, fmiSimulateME and fmiSimulateCS.  Progress meters are also available for FMIFlux.jl, but deactivated by default (during training, this can be a bit too much). When evaluating a NeuralFMU, you can use the same keyword with showProgress=true to show a progress bar during training, too. The simulation trajectory (also called the solution of your FMU's ODE system) can be plotted using fmiPlot(myFMU, solution), all axis will be labeled automatically.","category":"page"},{"location":"related/#Related-Publications","page":"Related Publications","title":"Related Publications","text":"","category":"section"},{"location":"related/","page":"Related Publications","title":"Related Publications","text":"Tobias Thummerer, Josef Kircher, Lars Mikelsons 2021 NeuralFMU: Towards Structural Integration of FMUs into Neural Networks (14th Modelica Conference, Preprint, Accepted) arXiv:2109.04351","category":"page"},{"location":"related/","page":"Related Publications","title":"Related Publications","text":"Tobias Thummerer, Johannes Tintenherr, Lars Mikelsons 2021 Hybrid modeling of the human cardiovascular system using NeuralFMUs (10th International Conference on Mathematical Modeling in Physical Sciences, Preprint, Accepted) arXiv:2109.04880","category":"page"},{"location":"tutorials/simulate/#Simulate-a-FMU","page":"Simulate a FMU","title":"Simulate a FMU","text":"","category":"section"},{"location":"tutorials/simulate/#Instantiation","page":"Simulate a FMU","title":"Instantiation","text":"","category":"section"},{"location":"tutorials/simulate/","page":"Simulate a FMU","title":"Simulate a FMU","text":"After you loaded your FMU (see more here), you need to create an instance of it to work with. An instance has the type fmiXComponent. You can assign your instance to a variable and work with it.","category":"page"},{"location":"tutorials/simulate/","page":"Simulate a FMU","title":"Simulate a FMU","text":"julia> fmucomponent = fmiInstantiate!(myFMU)","category":"page"},{"location":"tutorials/simulate/","page":"Simulate a FMU","title":"Simulate a FMU","text":"Additionally it is stored in the Julia struct representing the FMU. All functions in the FMI.jl library support function calls using a fmiXComponent or a fmiXStruct. Please note that if you instantiate a FMU multiple times, the function calls using the fmiXStruct will always use the lastly created instance of the FMU.","category":"page"},{"location":"tutorials/simulate/","page":"Simulate a FMU","title":"Simulate a FMU","text":"julia> fmucomponent = fmiInstantiate!(myFMU)\njulia> fmiInstantiate!(myFMU; loggingOn = true)","category":"page"},{"location":"tutorials/simulate/","page":"Simulate a FMU","title":"Simulate a FMU","text":"Optionally you can activate the logging of the replies of the FMU by logginOn = true. By default this feature is deactivated.","category":"page"},{"location":"tutorials/simulate/#Initialization","page":"Simulate a FMU","title":"Initialization","text":"","category":"section"},{"location":"tutorials/simulate/","page":"Simulate a FMU","title":"Simulate a FMU","text":"To be able to simulate a FMU, you first have to initialize it. With fmiSetupExperiment you are able to set the start and stop time for which the simulation should be valid. If no stop time is provided, the start time is used.","category":"page"},{"location":"tutorials/simulate/","page":"Simulate a FMU","title":"Simulate a FMU","text":"julia> fmiSetupExperiment(myFMU, 0.0, 10.0)","category":"page"},{"location":"tutorials/simulate/","page":"Simulate a FMU","title":"Simulate a FMU","text":"After the setup of the simulation, the following function calls are mandatory:","category":"page"},{"location":"tutorials/simulate/","page":"Simulate a FMU","title":"Simulate a FMU","text":"julia> fmiEnterInitializationMode(myFMU)\njulia> fmiExitInitializationMode(myFMU)","category":"page"},{"location":"tutorials/simulate/","page":"Simulate a FMU","title":"Simulate a FMU","text":"If you want to change the values of parameters before a simulation, you have to use the respective fmiSetXXX command in between those two function calls above.","category":"page"},{"location":"tutorials/simulate/","page":"Simulate a FMU","title":"Simulate a FMU","text":"julia> fmiEnterInitializationMode(myFMU)\njulia> fmiSetReal(myFMU, \"realVariable\", realValue)\njulia> fmiSetInteger(myFMU, \"integerVariable\", integerValue)\njulia> fmiExitInitializationMode(myFMU)","category":"page"},{"location":"tutorials/simulate/#Simulation","page":"Simulate a FMU","title":"Simulation","text":"","category":"section"},{"location":"tutorials/simulate/","page":"Simulate a FMU","title":"Simulate a FMU","text":"FMI.jl supports multiple ways to simulate a FMU. You can either use a one line command to simulate a model exchange or co simulation FMU and record the variables you want to track during the simulation or use the native commands of the FMI standard. But before you actually simulate something, you first have to define a start and stop time for the current simulation. An easy example for that is here provided.","category":"page"},{"location":"tutorials/simulate/","page":"Simulate a FMU","title":"Simulate a FMU","text":"t_start = 0.0\nt_stop = 8.0","category":"page"},{"location":"tutorials/simulate/#Easy-Simulation","page":"Simulate a FMU","title":"Easy Simulation","text":"","category":"section"},{"location":"tutorials/simulate/","page":"Simulate a FMU","title":"Simulate a FMU","text":"FMI.jl can identify what type of FMU you want to simulate and adjust the simulation accordingly. If the FMU supports both model exchange and co simulation, the FMU is always as a co simulation FMU simulated. If you want to simulate it as a model exchange FMU, you have to use the specific fmiSimulateME function call. Additionally to the needed start and stop time, you can also provide an array of variable names that you want keep track of. The function returns the values of those variables for the whole simulation time. Those can be plotted using the fmiPlot function. Please note that fmiSimulate has the option setup which is true by default. So the initialization can be ommited unless you want to change the values of parameters before the simulation.","category":"page"},{"location":"tutorials/simulate/","page":"Simulate a FMU","title":"Simulate a FMU","text":"data = fmiSimulate(myFMU, t_start, t_stop, [\"mass.s\", \"mass.v\"])\n\nfmiPlot(data)","category":"page"},{"location":"tutorials/simulate/#Simulation-close-to-FMI-Standard","page":"Simulate a FMU","title":"Simulation close to FMI Standard","text":"","category":"section"},{"location":"tutorials/simulate/","page":"Simulate a FMU","title":"Simulate a FMU","text":"This is only recommend for co simulation FMUs or experienced users due to the complexity of event handling for model exchange FMUs. The following code gives a short example on how to simulate a co simulation FMU without the variable tracking.","category":"page"},{"location":"tutorials/simulate/","page":"Simulate a FMU","title":"Simulate a FMU","text":"dt = 0.1\nts = 0.0:dt:10.0\nfor t in ts\n    fmiDoStep(fmuComp, t, dt)\nend\nfmiTerminate(fmuComp)","category":"page"},{"location":"tutorials/simulate/","page":"Simulate a FMU","title":"Simulate a FMU","text":"The fmiTerminate function resets the FMU after the simulation finished. So you can run another one with the same or changed parameters again.","category":"page"},{"location":"tutorials/simulate/#Finishing-the-simulation","page":"Simulate a FMU","title":"Finishing the simulation","text":"","category":"section"},{"location":"tutorials/simulate/","page":"Simulate a FMU","title":"Simulate a FMU","text":"After finishing all your simulations you can free the allocated memory of your simulation runs and the temporary data of the FMU with the fmiUnload function. For more information see Load/Unload a FMU","category":"page"},{"location":"library/library_ind/#Version-independent-library-functions","page":"FMI version independent functions","title":"Version independent library functions","text":"","category":"section"},{"location":"library/library_ind/#Creation,-Destruction-FMU","page":"FMI version independent functions","title":"Creation, Destruction FMU","text":"","category":"section"},{"location":"library/library_ind/","page":"FMI version independent functions","title":"FMI version independent functions","text":"fmiInstantiate!\nfmiFreeInstance!","category":"page"},{"location":"library/library_ind/#FMI.fmiInstantiate!","page":"FMI version independent functions","title":"FMI.fmiInstantiate!","text":"fmiInstantiate!(fmu::FMU2; pushComponents::Bool = true, visible::Bool = false, loggingOn::Bool = false, externalCallbacks::Bool = false,\n                      logStatusOK::Bool=true, logStatusWarning::Bool=true, logStatusDiscard::Bool=true, logStatusError::Bool=true, logStatusFatal::Bool=true, logStatusPending::Bool=true)\n\nCreates a new instance of the FMU, version independent.\n\nCreate a new instance of the given fmu, adds a logger if logginOn == true.\n\nArguments\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nKeywords\n\npushComponents::Bool = true:  pushComponents if the item component should be inserted in fmu.components(default = true).\nvisible::Bool = false: visible if the FMU should be started with graphic interface, if supported (default=false)\nloggingOn::Bool = false: loggingOn if the FMU should log and display function calls (default=false)\nexternalCallbacks::Bool = false: externalCallbacks if an external DLL should be used for the fmi2CallbackFunctions, this may improve readability of logging messages (default=false)\nlogStatusOK::Bool=true: logStatusOK whether to log status of kind fmi2OK (default=true)\nlogStatusWarning::Bool=true: logStatusWarning whether to log status of kind fmi2Warning (default=true)\nlogStatusDiscard::Bool=true: logStatusDiscard whether to log status of kind fmi2Discard (default=true)\nlogStatusError::Bool=true: logStatusError whether to log status of kind fmi2Error (default=true)\nlogStatusFatal::Bool=true: logStatusFatal whether to log status of kind fmi2Fatal (default=true)\nlogStatusPending::Bool=true: logStatusPending whether to log status of kind fmi2Pending (default=true)\n\nReturns\n\nnothing: if the instantiation failed. In addition, an error message appears.\ncomponent: Returns the instance of a new FMU component.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.19]: 2.1.5 Creation, Destruction and Logging of FMU Instances\n\nSee also fmi2Instantiate!, fmi2Instantiate, FMU2.\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiFreeInstance!","page":"FMI version independent functions","title":"FMI.fmiFreeInstance!","text":"fmiFreeInstance!(str::fmi2Struct)\n\nFrees the allocated memory of the last instance of the FMU.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nstatus::fmi2Status: returned by all functions to indicate the success of the function call\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.23]: 2.1.6 Initialization, Termination, and Resetting an FMU\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nSee also fmi2FreeInstance, fmi2Struct, FMU2, FMU2Component.\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#Platform-and-Version-number","page":"FMI version independent functions","title":"Platform and Version number","text":"","category":"section"},{"location":"library/library_ind/","page":"FMI version independent functions","title":"FMI version independent functions","text":"fmiGetTypesPlatform\nfmiGetVersion\nfmiSetDebugLogging","category":"page"},{"location":"library/library_ind/#FMI.fmiGetTypesPlatform","page":"FMI version independent functions","title":"FMI.fmiGetTypesPlatform","text":"fmiGetTypesPlatform(str::fmi2Struct)\n\nReturns the header file used to compile the FMU. By default returns default, version independent.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\n\n\nSee also fmi2GetVersion, fmi2Struct, FMU2, FMU2Component.\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiGetVersion","page":"FMI version independent functions","title":"FMI.fmiGetVersion","text":"fmiGetVersion(str::fmi2Struct)\n\nReturns the version of the FMU, version independent.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nReturns a string from the address of a C-style (NUL-terminated) string. The string represents the version of the “fmi2Functions.h” header file which was used to compile the functions of the FMU. The function returns “fmiVersion” which is defined in this header file. The standard header file as documented in this specification has version “2.0”\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.4 Inquire Platform and Version Number of Header Files\nFMISpec2.0.2[p.16]: 2.1.2 Platform Dependent Definitions\n\nSee also fmi2GetVersion, unsafe_string, fmi2Struct, FMU2, FMU2Component.\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiSetDebugLogging","page":"FMI version independent functions","title":"FMI.fmiSetDebugLogging","text":"fmiSetDebugLogging(str::fmi2Struct)\n\nControl the use of the logging callback function, version independent.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.22]: 2.1.5 Creation, Destruction and Logging of FMU Instances\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#Initialization,-Termination-and-Destruction","page":"FMI version independent functions","title":"Initialization, Termination and Destruction","text":"","category":"section"},{"location":"library/library_ind/","page":"FMI version independent functions","title":"FMI version independent functions","text":"fmiSetupExperiment\nfmiEnterInitializationMode\nfmiExitInitializationMode\nfmiTerminate\nfmiReset","category":"page"},{"location":"library/library_ind/#FMI.fmiSetupExperiment","page":"FMI version independent functions","title":"FMI.fmiSetupExperiment","text":"fmiSetupExperiment(str::fmi2Struct, c::FMU2Component, startTime::Union{Real, Nothing} = nothing, stopTime::Union{Real, Nothing} = nothing; tolerance::Union{Real, Nothing} = nothing)\n\nInitialize the Simulation boundries\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstartTime::Union{Real, Nothing} = nothing: startTime is a real number which sets the value of starting time of the experiment. The default value is set automatically if doing nothing (default = nothing).\nstopTime::Union{Real, Nothing} = nothing: stopTime is a real number which sets the value of ending time of the experiment. The default value is set automatically if doing nothing (default = nothing).\n\nKeywords\n\ntolerance::Union{Real, Nothing} = nothing: tolerance is a real number which sets the value of tolerance range. The default value is set automatically if doing nothing (default = nothing).\n\nReturns\n\nReturns a warning if str.state is not called in fmi2ComponentStateInstantiated.\nstatus::fmi2Status: returned by all functions to indicate the success of the function call\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.23]: 2.1.6 Initialization, Termination, and Resetting an FMU\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nSee also fmi2SetupExperiment, fmi2Struct, FMU2, FMU2Component.\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiEnterInitializationMode","page":"FMI version independent functions","title":"FMI.fmiEnterInitializationMode","text":"fmiEnterInitializationMode(str::fmi2Struct)\n\nInforms the FMU to enter initializaton mode, version independent.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nReturns a warning if str.state is not called in fmi2ComponentStateInstantiated.\nstatus::fmi2Status: returned by all functions to indicate the success of the function call\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.23]: 2.1.6 Initialization, Termination, and Resetting an FMU\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nSee also fmi2EnterInitializationMode, fmi2Struct, FMU2, FMU2Component.\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiExitInitializationMode","page":"FMI version independent functions","title":"FMI.fmiExitInitializationMode","text":"fmiExitInitializationMode(str::fmi2Struct)\n\nInforms the FMU to exit initialization mode, version independent.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nReturns\n\nReturns a warning if str.state is not called in fmi2ComponentStateInitializationMode.\nstatus::fmi2Status: returned by all functions to indicate the success of the function call\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\nFMISpec2.0.2[p.23]: 2.1.6 Initialization, Termination, and Resetting an FMU\nFMISpec2.0.2[p.18]: 2.1.3 Status Returned by Functions\n\nSee also fmi2ExitInitializationMode\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiTerminate","page":"FMI version independent functions","title":"FMI.fmiTerminate","text":"Informs the FMU that the simulation run is terminated, version independent.\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiReset","page":"FMI version independent functions","title":"FMI.fmiReset","text":"Resets the FMU after a simulation run, version independent.\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#Get/Set-variable-values","page":"FMI version independent functions","title":"Get/Set variable values","text":"","category":"section"},{"location":"library/library_ind/","page":"FMI version independent functions","title":"FMI version independent functions","text":"fmiGetReal\nfmiGetReal!\nfmiSetReal\nfmiGetInteger\nfmiGetInteger!\nfmiSetInteger\nfmiGetBoolean\nfmiGetBoolean!\nfmiSetBoolean\nfmiGetString\nfmiGetString!\nfmiSetString","category":"page"},{"location":"library/library_ind/#FMI.fmiGetReal","page":"FMI version independent functions","title":"FMI.fmiGetReal","text":"Returns the real values of an array of variables\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiGetReal!","page":"FMI version independent functions","title":"FMI.fmiGetReal!","text":"Writes the real values of an array of variables in the given field\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiSetReal","page":"FMI version independent functions","title":"FMI.fmiSetReal","text":"Set the values of an array of real variables\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiGetInteger","page":"FMI version independent functions","title":"FMI.fmiGetInteger","text":"Returns the integer values of an array of variables\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiGetInteger!","page":"FMI version independent functions","title":"FMI.fmiGetInteger!","text":"Writes the integer values of an array of variables in the given field\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiSetInteger","page":"FMI version independent functions","title":"FMI.fmiSetInteger","text":"Set the values of an array of integer variables\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiGetBoolean","page":"FMI version independent functions","title":"FMI.fmiGetBoolean","text":"Returns the boolean values of an array of variables\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiGetBoolean!","page":"FMI version independent functions","title":"FMI.fmiGetBoolean!","text":"Writes the boolean values of an array of variables in the given field\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiSetBoolean","page":"FMI version independent functions","title":"FMI.fmiSetBoolean","text":"Set the values of an array of boolean variables\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiGetString","page":"FMI version independent functions","title":"FMI.fmiGetString","text":"Returns the string values of an array of variables\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiGetString!","page":"FMI version independent functions","title":"FMI.fmiGetString!","text":"Writes the string values of an array of variables in the given field\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiSetString","page":"FMI version independent functions","title":"FMI.fmiSetString","text":"Set the values of an array of string variables\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMU-state-Functions","page":"FMI version independent functions","title":"FMU state Functions","text":"","category":"section"},{"location":"library/library_ind/","page":"FMI version independent functions","title":"FMI version independent functions","text":"fmiGetFMUstate\nfmiSetFMUstate\nfmiFreeFMUstate\nfmiSerializedFMUstateSize\nfmiSerializeFMUstate\nfmiDeSerializeFMUstate","category":"page"},{"location":"library/library_ind/#FMI.fmiGetFMUstate","page":"FMI version independent functions","title":"FMI.fmiGetFMUstate","text":"Returns the FMU state of the fmu\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiSetFMUstate","page":"FMI version independent functions","title":"FMI.fmiSetFMUstate","text":"Sets the FMU to the given state\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiSerializedFMUstateSize","page":"FMI version independent functions","title":"FMI.fmiSerializedFMUstateSize","text":"Returns the size of the byte vector the FMU can be stored in\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiSerializeFMUstate","page":"FMI version independent functions","title":"FMI.fmiSerializeFMUstate","text":"Serialize the data in the FMU state pointer\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiDeSerializeFMUstate","page":"FMI version independent functions","title":"FMI.fmiDeSerializeFMUstate","text":"Deserialize the data in the FMU state pointer\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#Partial-Derivatives","page":"FMI version independent functions","title":"Partial Derivatives","text":"","category":"section"},{"location":"library/library_ind/","page":"FMI version independent functions","title":"FMI version independent functions","text":"fmiGetDirectionalDerivative(::FMI.fmi2Struct, ::Array{Cint}, ::Array{Cint}, ::Array{Real}, ::Array{Real})","category":"page"},{"location":"library/library_ind/#FMI.fmiGetDirectionalDerivative-Tuple{Union{FMU2, FMU2Component}, Array{Int32, N} where N, Array{Int32, N} where N, Array{Real, N} where N, Array{Real, N} where N}","page":"FMI version independent functions","title":"FMI.fmiGetDirectionalDerivative","text":"Returns the values of the directional derivatives.\n\n\n\n\n\n","category":"method"},{"location":"library/library_ind/#CoSimulation-specific-Functions","page":"FMI version independent functions","title":"CoSimulation specific Functions","text":"","category":"section"},{"location":"library/library_ind/","page":"FMI version independent functions","title":"FMI version independent functions","text":"fmiDoStep(::FMI.fmi2Struct, ::Real)","category":"page"},{"location":"library/library_ind/#FMI.fmiDoStep-Tuple{Union{FMU2, FMU2Component}, Real}","page":"FMI version independent functions","title":"FMI.fmiDoStep","text":"Does one step in the CoSimulation FMU\n\n\n\n\n\n","category":"method"},{"location":"library/library_ind/#ModelExchange-specific-Functions","page":"FMI version independent functions","title":"ModelExchange specific Functions","text":"","category":"section"},{"location":"library/library_ind/","page":"FMI version independent functions","title":"FMI version independent functions","text":"fmiSetTime\nfmiSetContinuousStates\nfmiNewDiscreteStates\nfmiEnterContinuousTimeMode\nfmiCompletedIntegratorStep\nfmiGetDerivatives\nfmiGetEventIndicators\nfmiGetContinuousStates\nfmiGetNominalsOfContinuousStates","category":"page"},{"location":"library/library_ind/#FMI.fmiSetTime","page":"FMI version independent functions","title":"FMI.fmiSetTime","text":"Set a time instant\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiSetContinuousStates","page":"FMI version independent functions","title":"FMI.fmiSetContinuousStates","text":"Set a new (continuous) state vector\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiNewDiscreteStates","page":"FMI version independent functions","title":"FMI.fmiNewDiscreteStates","text":"Returns the next discrete states\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiEnterContinuousTimeMode","page":"FMI version independent functions","title":"FMI.fmiEnterContinuousTimeMode","text":"The model enters Continuous-Time Mode\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiCompletedIntegratorStep","page":"FMI version independent functions","title":"FMI.fmiCompletedIntegratorStep","text":"This function must be called by the environment after every completed step\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiGetDerivatives","page":"FMI version independent functions","title":"FMI.fmiGetDerivatives","text":"Compute state derivatives at the current time instant and for the current states\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiGetEventIndicators","page":"FMI version independent functions","title":"FMI.fmiGetEventIndicators","text":"Returns the event indicators of the FMU\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiGetContinuousStates","page":"FMI version independent functions","title":"FMI.fmiGetContinuousStates","text":"Return the new (continuous) state vector x\n\n\n\n\n\n","category":"function"},{"location":"library/library_ind/#FMI.fmiGetNominalsOfContinuousStates","page":"FMI version independent functions","title":"FMI.fmiGetNominalsOfContinuousStates","text":"Return the new (continuous) state vector x\n\n\n\n\n\n","category":"function"},{"location":"library/fmu2/#FMU-Standard-2-functions","page":"FMU 2 functions","title":"FMU Standard 2 functions","text":"","category":"section"},{"location":"library/fmu2/#fmu2","page":"FMU 2 functions","title":"Simulation results","text":"","category":"section"},{"location":"library/fmu2/","page":"FMU 2 functions","title":"FMU 2 functions","text":"fmi2SimulationResultGetValuesAtIndex\nfmi2SimulationResultGetTime\nfmi2SimulationResultGetValues","category":"page"},{"location":"library/fmu2/#Parsing-variable-names-to-ValueReferences","page":"FMU 2 functions","title":"Parsing variable names to ValueReferences","text":"","category":"section"},{"location":"library/fmu2/","page":"FMU 2 functions","title":"FMU 2 functions","text":"fmi2String2ValueReference\nfmi2ValueReference2String","category":"page"},{"location":"library/fmu2/#Opening-and-closing-FMUs","page":"FMU 2 functions","title":"Opening and closing FMUs","text":"","category":"section"},{"location":"library/fmu2/","page":"FMU 2 functions","title":"FMU 2 functions","text":"fmi2Load\nfmi2Unload","category":"page"},{"location":"library/fmu2/#Reading-the-model-description","page":"FMU 2 functions","title":"Reading the model description","text":"","category":"section"},{"location":"library/fmu2/","page":"FMU 2 functions","title":"FMU 2 functions","text":"fmi2GetModelName\nfmi2GetGUID\nfmi2GetGenerationTool\nfmi2GetGenerationDateAndTime\nfmi2GetVariableNamingConvention\nfmi2GetNumberOfEventIndicators\nfmi2CanGetSetState\nfmi2CanSerializeFMUstate\nfmi2ProvidesDirectionalDerivative\nfmi2IsCoSimulation\nfmi2IsModelExchange\nfmi2Info","category":"page"},{"location":"library/fmu2/#Simulate-FMU","page":"FMU 2 functions","title":"Simulate FMU","text":"","category":"section"},{"location":"library/fmu2/","page":"FMU 2 functions","title":"FMU 2 functions","text":"fmi2Simulate(::FMU2, ::Real = 0.0, ::Real = 1.0; ::FMI.fmi2ValueReferenceFormat = nothing, saveat=[], setup=true)\nfmi2SimulateCS(::FMI.fmi2Component, ::Real, ::Real; ::FMI.fmi2ValueReferenceFormat = nothing, saveat=[], setup=true)\nfmi2SimulateME(::FMI.fmi2Component, ::Real = 0.0, ::Real = 1.0; solver = nothing, customFx = nothing, ::FMI.fmi2ValueReferenceFormat = nothing, saveat = [], setup = true)\n","category":"page"},{"location":"examples/multipleInstance/#Simulate-multiple-instances","page":"Simulate multiple instances","title":"Simulate multiple instances","text":"","category":"section"},{"location":"examples/multipleInstance/","page":"Simulate multiple instances","title":"Simulate multiple instances","text":"This example shows how to work with multiple instances of a FMU.","category":"page"},{"location":"examples/multipleInstance/","page":"Simulate multiple instances","title":"Simulate multiple instances","text":"This first command loads the FMI.jl library, so you could work with it.","category":"page"},{"location":"examples/multipleInstance/","page":"Simulate multiple instances","title":"Simulate multiple instances","text":"#\n# Copyright (c) 2021 Tobias Thummerer, Lars Mikelsons, Josef Kircher\n# Licensed under the MIT license. See LICENSE file in the project root for details.\n#\n\nusing FMI","category":"page"},{"location":"examples/multipleInstance/","page":"Simulate multiple instances","title":"Simulate multiple instances","text":"The path to the FMU which we want to create multiple instances of is set. fmiLoad unpacks the FMU, reads the model description and stores all the necessary information of the FMU in myFMU. With fmiInstantiate! a first instance of the FMU is created.","category":"page"},{"location":"examples/multipleInstance/","page":"Simulate multiple instances","title":"Simulate multiple instances","text":"pathToFMU = joinpath(dirname(@__FILE__), \"../model/Dymola/2020x/SpringPendulum1D.fmu\")\n\nmyFMU = fmiLoad(pathToFMU)\n\n#create an instance and simulate it\ncomp1 = fmiInstantiate!(myFMU; loggingOn=true)","category":"page"},{"location":"examples/multipleInstance/","page":"Simulate multiple instances","title":"Simulate multiple instances","text":"To simulate the instance of the FMU you have to setup the experiment and enter and leave the initialization mode to prepare the FMU. This part is optional if you use the option setup=true in fmiSimulateCS.","category":"page"},{"location":"examples/multipleInstance/","page":"Simulate multiple instances","title":"Simulate multiple instances","text":"fmiSetupExperiment(comp1, 0.0)\nfmiEnterInitializationMode(comp1)\nfmiExitInitializationMode(comp1)","category":"page"},{"location":"examples/multipleInstance/","page":"Simulate multiple instances","title":"Simulate multiple instances","text":"The next part sets up the start and stop time.","category":"page"},{"location":"examples/multipleInstance/","page":"Simulate multiple instances","title":"Simulate multiple instances","text":"t_start = 0.0\nt_stop = 8.0","category":"page"},{"location":"examples/multipleInstance/","page":"Simulate multiple instances","title":"Simulate multiple instances","text":"The next part is the actual simulation. You can provide an array of variable names which you want to track. The return value of the function is that data.","category":"page"},{"location":"examples/multipleInstance/","page":"Simulate multiple instances","title":"Simulate multiple instances","text":"data1 = fmiSimulateCS(comp1, t_start, t_stop; recordValues=[\"mass.s\"])","category":"page"},{"location":"examples/multipleInstance/","page":"Simulate multiple instances","title":"Simulate multiple instances","text":"The result of the simulation can be visualized using the fmiPlot function.","category":"page"},{"location":"examples/multipleInstance/","page":"Simulate multiple instances","title":"Simulate multiple instances","text":"fmiPlot(data1)","category":"page"},{"location":"examples/multipleInstance/","page":"Simulate multiple instances","title":"Simulate multiple instances","text":"In the second part of the example we create a second instance of the FMU and change the spring stiffness. Then we simulate and plot it. If you compare the two plots you can see the different simulation results due to the adjusted spring stiffness.","category":"page"},{"location":"examples/multipleInstance/","page":"Simulate multiple instances","title":"Simulate multiple instances","text":"#create another instance, change the spring stiffness and simulate it\ncomp2 = fmiInstantiate!(myFMU; loggingOn=true)\nfmiSetupExperiment(comp2, 0.0)\nfmiEnterInitializationMode(comp2)\nspringConstant = fmiGetReal(comp2, \"spring.c\") * 0.1\nfmiSetReal(comp2, \"spring.c\", springConstant)\nfmiExitInitializationMode(comp2)\ndata2 = fmiSimulateCS(comp2, t_start, t_stop; recordValues=[\"mass.s\"])\nfmiPlot(data2)\n\n\n\nfmiUnload(myFMU)","category":"page"},{"location":"library/fmu/#Version-independent-FMU-functions","page":"FMU version independent functions","title":"Version independent FMU functions","text":"","category":"section"},{"location":"library/fmu/#Parsing-variable-names-to-ValueReferences","page":"FMU version independent functions","title":"Parsing variable names to ValueReferences","text":"","category":"section"},{"location":"library/fmu/","page":"FMU version independent functions","title":"FMU version independent functions","text":"fmiString2ValueReference","category":"page"},{"location":"library/fmu/#Opening-and-closing-FMUs","page":"FMU version independent functions","title":"Opening and closing FMUs","text":"","category":"section"},{"location":"library/fmu/","page":"FMU version independent functions","title":"FMU version independent functions","text":"fmiUnzip\nfmiLoad\nfmiUnload","category":"page"},{"location":"library/fmu/#FMI.fmiLoad","page":"FMU version independent functions","title":"FMI.fmiLoad","text":"fmiLoad(pathToFMU::String; unpackPath=nothing, type=nothing)\n\nLoad FMUs independent of the FMI version, currently supporting version 2.0.X.\n\nArguments\n\npathToFMU::String: String that contains the paths of ziped and unziped FMU folders.\n\nKeywords\n\nunpackPath=nothing: Via optional argument unpackPath, a path to unpack the FMU can be specified (default: system temporary directory).\ntype::Union{CS, ME} = nothing:  Via type, a FMU type can be selected. If none of the unified type set is used, the default value type = nothing will be used.\n\nReturns\n\nReturns the instance of the FMU struct.\n\nSee also fmi2Load.\n\n\n\n\n\n","category":"function"},{"location":"library/fmu/#FMI.fmiUnload","page":"FMU version independent functions","title":"FMI.fmiUnload","text":"fmiUnload(fmu::FMU2)\n\nUnloads the FMU and all its instances and frees the allocated memory.\n\nArguments\n\nfmu::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\n\nSee also fmi2Unload.\n\n\n\n\n\n","category":"function"},{"location":"library/fmu/#Reading-the-model-description","page":"FMU version independent functions","title":"Reading the model description","text":"","category":"section"},{"location":"library/fmu/","page":"FMU version independent functions","title":"FMU version independent functions","text":"fmiGetModelName\nfmiGetGUID\nfmiGetGenerationTool\nfmiGetGenerationDateAndTime\nfmiGetVariableNamingConvention\nfmiGetNumberOfEventIndicators\nfmiCanGetSetState\nfmiCanSerializeFMUstate\nfmiProvidesDirectionalDerivative\nfmiIsCoSimulation\nfmiIsModelExchange\nfmiInfo","category":"page"},{"location":"library/fmu/#FMI.fmiGetModelName","page":"FMU version independent functions","title":"FMI.fmiGetModelName","text":"fmiGetModelName(str::Union{fmi2StructMD, fmi3StructMD})\n\nReturns the tag 'modelName' from the model description.\n\nArguments\n\nstr::Union{fmi2StructMD, fmi3StructMD}:  Representative for an FMU in the FMI 2.0.2 Standard or FMI 3.0 Standard. Other notation:\n\nUnion{fmi2StructMD, fmi3StructMD} = Union{FMU2, FMU2Component, fmi2ModelDescription, FMU3, FMU3Component, fmi3ModelDescription}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstr::fmi2ModelDescription: Struct wich provides the static information of ModelVariables.\nstr::FMU3: Mutable struct representing an FMU in the FMI 3.0 Standard.\nstr::FMU3Component:  Mutable struct represents a pointer to an FMU specific data structure that contains the information needed. Also in FMI 3.0 Standard.\nstr::fmi3ModelDescription: Struct witch provides the static information of ModelVariables.\n\nSee also FMU2, FMU2Component, fmi2ModelDescription, FMU3, FMU3Component, fmi3ModelDescription.\n\n\n\n\n\n","category":"function"},{"location":"library/fmu/#FMI.fmiGetGUID","page":"FMU version independent functions","title":"FMI.fmiGetGUID","text":"fmiGetGUID(str::fmi2StructMD)\n\nReturns the tag 'guid' from the model description.\n\nArguments\n\nstr::fmi2StructMD:  Representative for an FMU in the FMI 2.0.2 Standard. More detailed:  fmi2StructMD =  Union{FMU2, FMU2Component, fmi2ModelDescription}\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstr::fmi2ModelDescription: Struct wich provides the static information of ModelVariables.\n\nSee also fmi2GetGUID, fmi2StructMD, FMU2, FMU2Component, fmi2ModelDescription.  \n\n\n\n\n\n","category":"function"},{"location":"library/fmu/#FMI.fmiGetGenerationTool","page":"FMU version independent functions","title":"FMI.fmiGetGenerationTool","text":"fmiGetGenerationTool(str::fmi2StructMD)\n\nReturns the tag 'generationtool' from the model description.\n\nArguments\n\nstr::fmi2StructMD:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed:  fmi2StructMD =  Union{FMU2, FMU2Component, fmi2ModelDescription}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstr::fmi2ModelDescription: Struct wich provides the static information of ModelVariables.\n\nReturns\n\nstr.generationtool: The function fmi2GetGenerationTool returns the tag 'generationtool' from the struct, representing a FMU (str).\n\nSee also fmi2GetGenerationTool, fmi2StructMD, FMU2, FMU2Component, fmi2ModelDescription.  \n\n\n\n\n\n","category":"function"},{"location":"library/fmu/#FMI.fmiGetGenerationDateAndTime","page":"FMU version independent functions","title":"FMI.fmiGetGenerationDateAndTime","text":"fmiGetGenerationDateAndTime(str::fmi2StructMD)\n\nReturns the tag 'generationdateandtime' from the model description.\n\nArguments\n\nstr::fmi2StructMD:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed:  fmi2StructMD =  Union{FMU2, FMU2Component, fmi2ModelDescription}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstr::fmi2ModelDescription: Struct witch provides the static information of ModelVariables.\n\nReturns\n\nstr.generationDateAndTime: The function fmi2GetGenerationDateAndTime returns the tag 'generationDateAndTime' from the struct, representing a FMU (str).\n\nSee also fmi2GetGenerationDateAndTime, fmi2StructMD, FMU2, FMU2Component, fmi2ModelDescription.  \n\n\n\n\n\n","category":"function"},{"location":"library/fmu/#FMI.fmiGetVariableNamingConvention","page":"FMU version independent functions","title":"FMI.fmiGetVariableNamingConvention","text":"fmiGetVariableNamingConvention(str::fmi2StructMD)\n\nReturns the tag 'varaiblenamingconvention' from the model description.\n\nArguments\n\nstr::fmi2StructMD:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed:  fmi2StructMD =  Union{FMU2, FMU2Component, fmi2ModelDescription}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstr::fmi2ModelDescription: Struct witch provides the static information of ModelVariables.\n\nReturns\n\nstr.variableNamingConvention: The function fmi2GetVariableNamingConvention returns the tag 'variableNamingConvention' from the struct, representing a FMU (str).\n\nSee also fmi2GetVariableNamingConvention, fmi2StructMD, FMU2, FMU2Component, fmi2ModelDescription.\n\n\n\n\n\n","category":"function"},{"location":"library/fmu/#FMI.fmiGetNumberOfEventIndicators","page":"FMU version independent functions","title":"FMI.fmiGetNumberOfEventIndicators","text":"fmiGetNumberOfEventIndicators(str::fmi2StructMD)\n\nReturns the tag 'numberOfEventIndicators' from the model description.\n\nArguments\n\nstr::fmi2StructMD:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2StructMD =  Union{FMU2, FMU2Component, fmi2ModelDescription}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstr::fmi2ModelDescription: Struct witch provides the static information of ModelVariables.\n\nReturns\n\nstr.numberOfEventIndicators: The function fmi2GetNumberOfEventIndicators returns the tag 'numberOfEventIndicators' from the struct, representing a FMU (str).\n\nSee also fmi2GetNumberOfEventIndicators, fmi2StructMD, FMU2, FMU2Component, fmi2ModelDescription.\n\n\n\n\n\n","category":"function"},{"location":"library/fmu/#FMI.fmiCanGetSetState","page":"FMU version independent functions","title":"FMI.fmiCanGetSetState","text":"fmiCanGetSetState(str::fmi2StructMD)\n\nReturns true, if the FMU supports the getting/setting of states\n\nArguments\n\nstr::fmi2StructMD:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2StructMD =  Union{FMU2, FMU2Component, fmi2ModelDescription}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstr::fmi2ModelDescription: Struct witch provides the static information of ModelVariables.\n\nReturns\n\n::Bool: The function fmi2CanGetSetState returns True, if the FMU supports the getting/setting of states.\n\nSee also fmi2CanGetSetState, fmi2StructMD, FMU2, FMU2Component, fmi2ModelDescription.\n\n\n\n\n\n","category":"function"},{"location":"library/fmu/#FMI.fmiCanSerializeFMUstate","page":"FMU version independent functions","title":"FMI.fmiCanSerializeFMUstate","text":"fmiCanSerializeFMUstate(str::fmi2StructMD)\n\nReturns true, if the FMU state can be serialized\n\nArguments\n\nstr::fmi2StructMD:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2StructMD =  Union{FMU2, FMU2Component, fmi2ModelDescription}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstr::fmi2ModelDescription: Struct wich provides the static information of ModelVariables.\n\nReturns\n\n::Bool: The function fmi2CanSerializeFMUstate returns True, if the FMU state can be serialized.\n\nSee also fmi2CanSerializeFMUstate, fmi2StructMD, FMU2, FMU2Component, fmi2ModelDescription.\n\n\n\n\n\n","category":"function"},{"location":"library/fmu/#FMI.fmiProvidesDirectionalDerivative","page":"FMU version independent functions","title":"FMI.fmiProvidesDirectionalDerivative","text":"fmiProvidesDirectionalDerivative(str::fmi2StructMD)\n\nReturns true, if the FMU provides directional derivatives\n\nArguments\n\nstr::fmi2StructMD:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2StructMD =  Union{FMU2, FMU2Component, fmi2ModelDescription}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstr::fmi2ModelDescription: Struct witch provides the static information of ModelVariables.\n\nReturns\n\n::Bool: The function fmi2ProvidesDirectionalDerivative returns True, if the FMU provides directional derivatives.\n\nSee also fmi2ProvidesDirectionalDerivative, fmi2StructMD, FMU2, FMU2Component, fmi2ModelDescription.\n\n\n\n\n\n","category":"function"},{"location":"library/fmu/#FMI.fmiIsCoSimulation","page":"FMU version independent functions","title":"FMI.fmiIsCoSimulation","text":"fmiIsCoSimulation(str::fmi2StructMD)\n\nReturns true, if the FMU supports co simulation\n\nArguments\n\nstr::fmi2StructMD:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2StructMD =  Union{FMU2, FMU2Component, fmi2ModelDescription}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstr::fmi2ModelDescription: Struct witch provides the static information of ModelVariables.\n\nReturns\n\n::Bool: The function fmi2IsCoSimulation returns True, if the FMU supports co simulation\n\nSee also fmi2IsCoSimulation, fmi2StructMD, FMU2, FMU2Component, fmi2ModelDescription.\n\n\n\n\n\n","category":"function"},{"location":"library/fmu/#FMI.fmiIsModelExchange","page":"FMU version independent functions","title":"FMI.fmiIsModelExchange","text":"fmiIsModelExchange(str::fmi2StructMD)\n\nReturns true, if the FMU supports model exchange\n\nArguments\n\nstr::fmi2StructMD:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2StructMD =  Union{FMU2, FMU2Component, fmi2ModelDescription}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nstr::fmi2ModelDescription: Struct witch provides the static information of ModelVariables.\n\nReturns\n\n::Bool: The function fmi2IsCoSimulation returns True, if the FMU supports model exchange.\n\nSee also fmi2IsModelExchange, fmi2StructMD, FMU2, FMU2Component, fmi2ModelDescription.\n\n\n\n\n\n","category":"function"},{"location":"library/fmu/#FMI.fmiInfo","page":"FMU version independent functions","title":"FMI.fmiInfo","text":"fmiInfo(str::fmi2Struct)\n\nPrints FMU-specific information into the REPL.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\n\nSource\n\nFMISpec2.0.2 Link: https://fmi-standard.org/\n\nSee also fmi2Info, fmi2Struct, FMU2, FMU2Component.\n\n\n\n\n\n","category":"function"},{"location":"library/fmu/#Simulate-FMU","page":"FMU version independent functions","title":"Simulate FMU","text":"","category":"section"},{"location":"library/fmu/","page":"FMU version independent functions","title":"FMU version independent functions","text":"fmiSimulate\nfmiSimulateCS\nfmiSimulateME\n","category":"page"},{"location":"library/fmu/#FMI.fmiSimulate","page":"FMU version independent functions","title":"FMI.fmiSimulate","text":"fmiSimulate(str::fmi2Struct, t_start::Union{Real, Nothing} = nothing, t_stop::Union{Real, Nothing} = nothing;\n            tolerance::Union{Real, Nothing} = nothing,\n            dt::Union{Real, Nothing} = nothing,\n            solver = nothing,\n            customFx = nothing,\n            recordValues::fmi2ValueReferenceFormat = nothing,\n            saveat = [],\n            setup::Bool = true,\n            reset::Union{Bool, Nothing} = nothing, # nothing = auto\n            inputValueReferences::fmi2ValueReferenceFormat = nothing,\n            inputFunction = nothing,\n            parameters::Union{Dict{<:Any, <:Any}, Nothing} = nothing,\n            dtmax::Union{Real, Nothing} = nothing,\n            kwargs...)\n\nStarts a simulation of the FMU instance for the matching FMU type, if both types are available, CS is preferred.\n\nArguments\n\nstr::fmi2Struct: Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nt_start::Union{Real, Nothing} = nothing: Set the start time to a value of type Real or the default value from the model description is used.\nt_stop::Union{Real, Nothing} = nothing: Set the end time to a value of type Real or the default value from the model description is used.\n\nKeywords\n\ntolerance::Union{Real, Nothing} = nothing: Real number to set the tolerance for any OED-solver\ndt::Union{Real, Nothing} = nothing: Real number to set the step size of the OED-solver. Defaults to an automatic choice if the method is adaptive. More Info: DifferentialEquations.jl Documentation\nsolver = nothing: Any Julia-supported OED-solver  (default is Tsit5). More Info: DifferentialEquations.jl Documentation\ncustomFx = nothing: [deperecated] Ability to give a custom state derivative function ẋ=f(x,t)\nrecordValues::fmi2ValueReferenceFormat = nothing: Array of variables (strings or variableIdentifiers) to record. Results are returned as DiffEqCallbacks.SavedValues\nsaveat = []: Time points to save values at (interpolated). More Info: DifferentialEquations.jl Documentation\nsetup::Bool = true: Boolean, if FMU should be setup (default: setup=true)\nreset::Union{Bool, Nothing} = nothing: Boolean, if FMU should be reset before simulation (default: reset:=auto)\ninputValueReferences::fmi2ValueReferenceFormat = nothing: Array of input variables (strings or variableIdentifiers) to set at every simulation step\ninputFunction = nothing: Function to retrieve the values to set the inputs to\nparameters::Union{Dict{<:Any, <:Any}, Nothing} = nothing: Dictionary of parameter variables (strings or variableIdentifiers) and values (Real, Integer, Boolean, String) to set parameters during initialization\ndtmax::Union{Real, Nothing} = nothing: Real number for setting maximum dt for adaptive timestepping for the ODE solver. The default values are package dependent. More Info: DifferentialEquations.jl Documentation\nkwargs...: Further parameters of already defined functions solve(args..., kwargs...) from the library DifferentialEquations.jl\n\nReturns\n\nsuccess::Bool for CS-FMUs  \nODESolution for ME-FMUs  \nif keyword recordValues is set, a tuple of type (success::Bool, DiffEqCallbacks.SavedValues) for CS-FMUs  \nif keyword recordValues is set, a tuple of type (ODESolution, DiffEqCallbacks.SavedValues) for ME-FMUs  \n\nSee also fmi2Simulate, fmi2SimulateME, fmi2SimulateCS, fmi2Struct, FMU2, FMU2Component.   \n\n\n\n\n\n","category":"function"},{"location":"library/fmu/#FMI.fmiSimulateCS","page":"FMU version independent functions","title":"FMI.fmiSimulateCS","text":"fmiSimulateCS(str::fmi2Struct, t_start::Union{Real, Nothing} = nothing, t_stop::Union{Real, Nothing} = nothing;\n            tolerance::Union{Real, Nothing} = nothing,\n            dt::Union{Real, Nothing} = nothing,\n            solver = nothing,\n            customFx = nothing,\n            recordValues::fmi2ValueReferenceFormat = nothing,\n            saveat = [],\n            setup::Bool = true,\n            reset::Union{Bool, Nothing} = nothing, # nothing = auto\n            inputValueReferences::fmi2ValueReferenceFormat = nothing,\n            inputFunction = nothing,\n            parameters::Union{Dict{<:Any, <:Any}, Nothing} = nothing,\n            dtmax::Union{Real, Nothing} = nothing,\n            kwargs...)\n\nStarts a simulation of the Co-Simulation FMU instance.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nt_start::Union{Real, Nothing} = nothing: Set the start time to a value of type Real or the default value from the model description is used.\nt_stop::Union{Real, Nothing} = nothing: Set the end time to a value of type Real or the default value from the model description is used.\n\nKeywords\n\ntolerance::Union{Real, Nothing} = nothing: Real number to set the tolerance for any OED-solver\ndt::Union{Real, Nothing} = nothing: Real number to set the step size of the OED-solver. Defaults to an automatic choice if the method is adaptive. More Info: DifferentialEquations.jl Documentation\nsolver = nothing: Any Julia-supported OED-solver  (default is Tsit5). More Info: DifferentialEquations.jl Documentation\ncustomFx = nothing: [deperecated] Ability to give a custom state derivative function ẋ=f(x,t)\nrecordValues::fmi2ValueReferenceFormat = nothing: Array of variables (strings or variableIdentifiers) to record. Results are returned as DiffEqCallbacks.SavedValues\nsaveat = []: Time points to save values at (interpolated). More Info: DifferentialEquations.jl Documentation\nsetup::Bool = true: Boolean, if FMU should be setup (default: setup=true)\nreset::Union{Bool, Nothing} = nothing: Boolean, if FMU should be reset before simulation (default: reset:=auto)\ninputValueReferences::fmi2ValueReferenceFormat = nothing: Array of input variables (strings or variableIdentifiers) to set at every simulation step\ninputFunction = nothing: Function to retrieve the values to set the inputs to\nparameters::Union{Dict{<:Any, <:Any}, Nothing} = nothing: Dictionary of parameter variables (strings or variableIdentifiers) and values (Real, Integer, Boolean, String) to set parameters during initialization\ndtmax::Union{Real, Nothing} = nothing: Real number for setting maximum dt for adaptive timestepping for the ODE solver. The default values are package dependent. More Info: DifferentialEquations.jl Documentation\nkwargs...: Further parameters of already defined functions solve(args..., kwargs...) from the library DifferentialEquations.jl\n\nReturns\n\nIf keyword recordValues is not set, a boolean success is returned (simulation success).\nIf keyword recordValues is set, a tuple of type (true, DiffEqCallbacks.SavedValues) or (false, nothing).  \n\nSee also fmi2SimulateCS, fmi2Simulate, fmi2SimulateME, fmi2Struct, FMU2, FMU2Component.\n\n\n\n\n\n","category":"function"},{"location":"library/fmu/#FMI.fmiSimulateME","page":"FMU version independent functions","title":"FMI.fmiSimulateME","text":"fmiSimulateME(str::fmi2Struct, t_start::Union{Real, Nothing} = nothing, t_stop::Union{Real, Nothing} = nothing;\n            tolerance::Union{Real, Nothing} = nothing,\n            dt::Union{Real, Nothing} = nothing,\n            solver = nothing,\n            customFx = nothing,\n            recordValues::fmi2ValueReferenceFormat = nothing,\n            saveat = [],\n            setup::Bool = true,\n            reset::Union{Bool, Nothing} = nothing, # nothing = auto\n            inputValueReferences::fmi2ValueReferenceFormat = nothing,\n            inputFunction = nothing,\n            parameters::Union{Dict{<:Any, <:Any}, Nothing} = nothing,\n            dtmax::Union{Real, Nothing} = nothing,\n            kwargs...)\n\nSimulates a FMU instance for the given simulation time interval.\n\nArguments\n\nstr::fmi2Struct:  Representative for an FMU in the FMI 2.0.2 Standard.\n\nMore detailed: fmi2Struct = Union{FMU2, FMU2Component}\n\nstr::FMU2: Mutable struct representing a FMU and all it instantiated instances in the FMI 2.0.2 Standard.\nstr::FMU2Component: Mutable struct represents an instantiated instance of an FMU in the FMI 2.0.2 Standard.\nt_start::Union{Real, Nothing} = nothing: Set the start time to a value of type Real or the default value from the model description is used.\nt_stop::Union{Real, Nothing} = nothing: Set the end time to a value of type Real or the default value from the model description is used.\n\nKeywords\n\ntolerance::Union{Real, Nothing} = nothing: Real number to set the tolerance for any OED-solver\ndt::Union{Real, Nothing} = nothing: Real number to set the step size of the OED-solver. Defaults to an automatic choice if the method is adaptive. More Info: DifferentialEquations.jl Documentation\nsolver = nothing: Any Julia-supported OED-solver  (default is Tsit5). More Info: DifferentialEquations.jl Documentation\ncustomFx = nothing: [deperecated] Ability to give a custom state derivative function ẋ=f(x,t)\nrecordValues::fmi2ValueReferenceFormat = nothing: Array of variables (strings or variableIdentifiers) to record. Results are returned as DiffEqCallbacks.SavedValues\nsaveat = []: Time points to save values at (interpolated). More Info: DifferentialEquations.jl Documentation\nsetup::Bool = true: Boolean, if FMU should be setup (default: setup=true)\nreset::Union{Bool, Nothing} = nothing: Boolean, if FMU should be reset before simulation (default: reset:=auto)\ninputValueReferences::fmi2ValueReferenceFormat = nothing: Array of input variables (strings or variableIdentifiers) to set at every simulation step\ninputFunction = nothing: Function to retrieve the values to set the inputs to\nparameters::Union{Dict{<:Any, <:Any}, Nothing} = nothing: Dictionary of parameter variables (strings or variableIdentifiers) and values (Real, Integer, Boolean, String) to set parameters during initialization\ndtmax::Union{Real, Nothing} = nothing: Real number for setting maximum dt for adaptive timestepping for the ODE solver. The default values are package dependent. More Info: DifferentialEquations.jl Documentation\nkwargs...: Further parameters of already defined functions solve(args..., kwargs...) from the library DifferentialEquations.jl\n\nReturns\n\nIf keyword recordValues is not set, a struct of type ODESolution.\nIf keyword recordValues is set, a tuple of type (ODESolution, DiffEqCallbacks.SavedValues).\n\nSee also fmi2SimulateME fmi2SimulateCS, fmi2Simulate, fmi2Struct, FMU2, FMU2Component.  \n\n\n\n\n\n","category":"function"},{"location":"library/fmu/#Visualize-simulation-results","page":"FMU version independent functions","title":"Visualize simulation results","text":"","category":"section"},{"location":"library/fmu/","page":"FMU version independent functions","title":"FMU version independent functions","text":"fmiPlot","category":"page"},{"location":"examples/parameterize/#Parameterize","page":"Parameterize","title":"Parameterize","text":"","category":"section"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"This example shows you how to parameterize a FMU before simulation. For the actual simulation visit Tutorials or the Co-Simulation or Model Exchange examples.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"This first command loads the FMI.jl library, so you could work with it.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"#\n# Copyright (c) 2021 Tobias Thummerer, Lars Mikelsons, Josef Kircher\n# Licensed under the MIT license. See LICENSE file in the project root for details.\n#\n\nusing FMI\nusing Plots","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"The path to the FMU which we want to parameterize is created. fmiLoad unpacks the FMU, reads the model description and stores all the necessary information of the FMU in myFMU. With fmiInstantiate! an instance of the FMU is created.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"pathToFMU = joinpath(dirname(@__FILE__), \"../model/Dymola/2020x/IO.fmu\")\n\nmyFMU = fmiLoad(pathToFMU)\nfmiInstantiate!(myFMU; loggingOn=true)","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"To parameterize the instance of the FMU you have to setup the experiment and enter the initialization mode.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"fmiSetupExperiment(myFMU, 0.0)\n\nfmiEnterInitializationMode(myFMU)","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"First we read the initial value of the variable p_string. Then we create random values for all data types and a different string.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"fmiGetString(myFMU, \"p_string\")\n\nrndReal = 100 * rand()\nrndInteger = round(Integer, 100 * rand())\nrndBoolean = rand() > 0.5\nrndString = \"Not random!\"","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"Second we set the variables of the FMU to these new random values and check if they have been stored in the corresponding variables.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"fmiSetReal(myFMU, \"p_real\", rndReal)\ndisplay(\"$rndReal == $(fmiGetReal(myFMU, \"p_real\"))\")\n\nfmiSetInteger(myFMU, \"p_integer\", rndInteger)\ndisplay(\"$rndInteger == $(fmiGetInteger(myFMU, \"p_integer\"))\")\n\nfmiSetBoolean(myFMU, \"p_boolean\", rndBoolean)\ndisplay(\"$rndBoolean == $(fmiGetBoolean(myFMU, \"p_boolean\"))\")\n\nfmiSetString(myFMU, \"p_string\", rndString)\ndisplay(\"$rndString == $(fmiGetString(myFMU, \"p_string\"))\")","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"Last we exit the initialization mode and unload the FMU and free the allocated memory.","category":"page"},{"location":"examples/parameterize/","page":"Parameterize","title":"Parameterize","text":"fmiExitInitializationMode(myFMU)\n\nfmiUnload(myFMU)","category":"page"},{"location":"#FMI.jl-Documentation","page":"Introduction","title":"FMI.jl Documentation","text":"","category":"section"},{"location":"#What-is-FMI.jl?","page":"Introduction","title":"What is FMI.jl?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"FMI.jl is a free-to-use software library for the Julia programming language, which integrates FMI (fmi-standard.org): load, instantiate, parameterize and simulate FMUs seamlessly inside the Julia programming language!","category":"page"},{"location":"#How-can-I-install-FMI.jl?","page":"Introduction","title":"How can I install FMI.jl?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"open a Julia-Command-Window, activate your preferred environment\ngo to package manager using ] and type add FMI","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> ]\n\n(@v1.6) pkg> add FMI","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"If you want to check that everything works correctly, you can run the tests bundled with FMI.jl:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> using Pkg\n\njulia> Pkg.test(\"FMI\")","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Additionally, you can check the version of FMI.jl that you have installed with the status command.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> ]\n(@v1.6) pkg> status FMI","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Throughout the rest of the tutorial we assume that you have installed the FMI.jl package and have typed using FMI which loads the package:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> using FMI","category":"page"},{"location":"#How-the-documentation-is-structured?","page":"Introduction","title":"How the documentation is structured?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Having a high-level overview of how this documentation is structured will help you know where to look for certain things. The xxx main parts of the documentation are :","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The Tutorials section explains all the necessary steps to work with the library.\nThe examples section gives insight in what is possible with this Library while using short and easily understandable code snippets\nThe library functions sections contains all the documentation to the functions provided by this library","category":"page"},{"location":"#What-is-currently-supported-in-FMI.jl?","page":"Introduction","title":"What is currently supported in FMI.jl?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"simulation / plotting of CS- and ME-FMUs\nevent-handling for discontinuous ME-FMUs\nthe full FMI command set","category":"page"},{"location":"#What-is-under-development-in-FMI.jl?","page":"Introduction","title":"What is under development in FMI.jl?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"FMI 3.0 and SSP 1.0 support\nFMI Cross Checks\nmore examples\n...","category":"page"},{"location":"#What-Platforms-are-supported?","page":"Introduction","title":"What Platforms are supported?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"FMI.jl is tested (and testing) under Julia Version 1.6 and latest on Windows (latest) and Ubuntu (latest). Mac should work, but untested.","category":"page"},{"location":"#How-to-cite?-Related-publications?","page":"Introduction","title":"How to cite? Related publications?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Tobias Thummerer, Josef Kircher, Lars Mikelsons 2021 NeuralFMU: Towards Structural Integration of FMUs into Neural Networks (14th Modelica Conference, Preprint, Accepted) arXiv:2109.04351","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Tobias Thummerer, Johannes Tintenherr, Lars Mikelsons 2021 Hybrid modeling of the human cardiovascular system using NeuralFMUs (10th International Conference on Mathematical Modeling in Physical Sciences, Preprint, Accepted) arXiv:2109.04880","category":"page"},{"location":"#Interested-in-Hybrid-Modeling-in-Julia-using-FMUs?","page":"Introduction","title":"Interested in Hybrid Modeling in Julia using FMUs?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"See FMIFlux.jl.","category":"page"},{"location":"library/library/#library","page":"FMI 2 library functions","title":"Library functions","text":"","category":"section"},{"location":"library/library/#Creation,-Destruction-FMU","page":"FMI 2 library functions","title":"Creation, Destruction FMU","text":"","category":"section"},{"location":"library/library/","page":"FMI 2 library functions","title":"FMI 2 library functions","text":"fmi2Instantiate\nfmi2FreeInstance!(::FMI.fmi2Component)","category":"page"},{"location":"library/library/#Platform-and-Version-number","page":"FMI 2 library functions","title":"Platform and Version number","text":"","category":"section"},{"location":"library/library/","page":"FMI 2 library functions","title":"FMI 2 library functions","text":"fmi2GetTypesPlatform(::Ptr{Nothing})\nfmi2GetVersion(::Ptr{Nothing})\nfmi2SetDebugLogging(::FMI.fmi2Component, ::FMI.fmi2Boolean, ::Unsigned, ::Ptr{Nothing})","category":"page"},{"location":"library/library/#Initialization,-Termination-and-Destruction","page":"FMI 2 library functions","title":"Initialization, Termination and Destruction","text":"","category":"section"},{"location":"library/library/","page":"FMI 2 library functions","title":"FMI 2 library functions","text":"fmi2SetupExperiment(::FMI.fmi2Component, ::FMI.fmi2Boolean, ::FMI.fmi2Real, ::FMI.fmi2Real, ::FMI.fmi2Boolean, ::FMI.fmi2Real)\nfmi2EnterInitializationMode(::FMI.fmi2Component)\nfmi2ExitInitializationMode(::FMI.fmi2Component)\nfmi2Terminate(::FMI.fmi2Component)\nfmi2Reset(::FMI.fmi2Component)","category":"page"},{"location":"library/library/#Get/Set-variable-values","page":"FMI 2 library functions","title":"Get/Set variable values","text":"","category":"section"},{"location":"library/library/","page":"FMI 2 library functions","title":"FMI 2 library functions","text":"fmi2GetReal(::FMI.fmi2Component, ::FMI.fmi2ValueReferenceFormat)\nfmi2GetReal!(::FMI.fmi2Component, ::Array{FMI.fmi2ValueReference}, ::Csize_t, ::Array{FMI.fmi2Real})\nfmi2SetReal(::FMI.fmi2Component, ::Array{FMI.fmi2ValueReference}, ::Csize_t, ::Array{FMI.fmi2Real})\nfmi2GetInteger(::FMI.fmi2Component, ::FMI.fmi2ValueReferenceFormat)\nfmi2GetInteger!(::FMI.fmi2Component, ::Array{FMI.fmi2ValueReference}, ::Csize_t, ::Array{FMI.fmi2Integer})\nfmi2SetInteger(::FMI.fmi2Component, ::Array{FMI.fmi2ValueReference}, ::Csize_t, ::Array{FMI.fmi2Integer})\nfmi2GetBoolean(::FMI.fmi2Component, ::FMI.fmi2ValueReferenceFormat)\nfmi2GetBoolean!(::FMI.fmi2Component, ::Array{FMI.fmi2ValueReference}, ::Csize_t, ::Array{FMI.fmi2Boolean})\nfmi2SetBoolean(::FMI.fmi2Component, ::Array{FMI.fmi2ValueReference}, ::Csize_t, ::Array{FMI.fmi2Boolean})\nfmi2GetString(::FMI.fmi2Component, ::FMI.fmi2ValueReferenceFormat)\nfmi2GetString!(::FMI.fmi2Component, ::Array{FMI.fmi2ValueReference}, ::Csize_t, ::Vector{Ptr{Cchar}})\nfmi2SetString(::FMI.fmi2Component, ::Array{FMI.fmi2ValueReference}, ::Csize_t, ::Union{Array{Ptr{Cchar}}, Array{Ptr{UInt8}}})","category":"page"},{"location":"library/library/#FMU-state-Functions","page":"FMI 2 library functions","title":"FMU state Functions","text":"","category":"section"},{"location":"library/library/","page":"FMI 2 library functions","title":"FMI 2 library functions","text":"fmi2GetFMUstate(::FMI.fmi2Component, ::Ref{FMI.fmi2FMUstate})\nfmi2SetFMUstate(::FMI.fmi2Component, ::FMI.fmi2FMUstate)\nfmi2FreeFMUstate(::FMI.fmi2Component, ::Ref{FMI.fmi2FMUstate})\nfmi2SerializedFMUstateSize(::FMI.fmi2Component, ::FMI.fmi2FMUstate, ::Ref{Csize_t})\nfmi2SerializeFMUstate(::FMI.fmi2Component, ::FMI.fmi2FMUstate, ::Array{FMI.fmi2Byte}, ::Csize_t)\nfmi2DeSerializeFMUstate(::FMI.fmi2Component, ::Array{FMI.fmi2Byte}, ::Csize_t, ::Ref{FMI.fmi2FMUstate})","category":"page"},{"location":"library/library/#Partial-Derivatives","page":"FMI 2 library functions","title":"Partial Derivatives","text":"","category":"section"},{"location":"library/library/","page":"FMI 2 library functions","title":"FMI 2 library functions","text":"fmi2GetDirectionalDerivative!(::FMI.fmi2Component, ::Array{FMI.fmi2ValueReference}, ::Csize_t, ::Array{FMI.fmi2ValueReference}, ::Csize_t, ::Array{FMI.fmi2Real}, ::Array{FMI.fmi2Real})\nfmi2GetDirectionalDerivative(::FMI.fmi2Component, ::Array{FMI.fmi2ValueReference}, ::Array{FMI.fmi2ValueReference}, ::Array{FMI.fmi2Real} = Array{FMI.fmi2Real}([]))","category":"page"},{"location":"library/library/#CoSimulation-specific-Functions","page":"FMI 2 library functions","title":"CoSimulation specific Functions","text":"","category":"section"},{"location":"library/library/","page":"FMI 2 library functions","title":"FMI 2 library functions","text":"fmi2SetRealInputDerivatives(::FMI.fmi2Component, ::FMI.fmi2ValueReference, ::Unsigned, ::FMI.fmi2Integer, ::FMI.fmi2Real)\nfmi2GetRealOutputDerivatives(::FMI.fmi2Component, ::FMI.fmi2ValueReference, ::Unsigned, ::FMI.fmi2Integer, ::FMI.fmi2Real)\nfmi2DoStep(::FMI.fmi2Component, ::FMI.fmi2Real, ::FMI.fmi2Real, ::FMI.fmi2Boolean)\nfmi2CancelStep(::FMI.fmi2Component)\nfmi2GetStatus(::FMI.fmi2Component, ::FMI.fmi2StatusKind, ::FMI.fmi2Status)\nfmi2GetRealStatus(::FMI.fmi2Component, ::FMI.fmi2StatusKind, ::FMI.fmi2Real)\nfmi2GetIntegerStatus(::FMI.fmi2Component, ::FMI.fmi2StatusKind, ::FMI.fmi2Integer)\nfmi2GetBooleanStatus(::FMI.fmi2Component, ::FMI.fmi2StatusKind, ::FMI.fmi2Boolean)\nfmi2GetStringStatus(::FMI.fmi2Component, ::FMI.fmi2StatusKind, ::FMI.fmi2String)","category":"page"},{"location":"library/library/#ModelExchange-specific-Functions","page":"FMI 2 library functions","title":"ModelExchange specific Functions","text":"","category":"section"},{"location":"library/library/","page":"FMI 2 library functions","title":"FMI 2 library functions","text":"fmi2SetTime(::FMI.fmi2Component, ::FMI.fmi2Real)\nfmi2SetContinuousStates(::FMI.fmi2Component, ::Array{FMI.fmi2Real}, ::Csize_t)\nfmi2EnterEventMode(::FMI.fmi2Component)\nfmi2NewDiscreteStates(::FMI.fmi2Component, ::FMI.fmi2EventInfo)\nfmi2EnterContinuousTimeMode(::FMI.fmi2Component)\nfmi2CompletedIntegratorStep!(::FMI.fmi2Component, ::FMI.fmi2Boolean, ::FMI.fmi2Boolean, ::FMI.fmi2Boolean)\nfmi2GetDerivatives(::FMI.fmi2Component, ::Array{FMI.fmi2Real}, ::Csize_t)\nfmi2GetEventIndicators(::FMI.fmi2Component, ::Array{FMI.fmi2Real}, ::Csize_t)\nfmi2GetContinuousStates(::FMI.fmi2Component, ::Array{FMI.fmi2Real}, ::Csize_t)\nfmi2GetNominalsOfContinuousStates(::FMI.fmi2Component, ::Array{FMI.fmi2Real}, ::Csize_t)","category":"page"}]
}
